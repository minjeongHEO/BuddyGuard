import { useEffect, useState } from 'react';
import { RouteSnapshot, fromKakaoLatLng } from 'route-snap';

import { IsStartedType } from '@/components/pages/walk/GoWalk';
import { DEFAULT_MAP_LEVEL, DEFAULT_MAP_POSITION } from '@/constants/map';
import {
  adjustMapBounds,
  createOverLayElement,
  getMapPosition,
  moveMapTo,
  replaceCustomOverLay,
  setOverlay,
} from '@/helper/kakaoMapHelpers';
import { BuddysType, PositionPair, SelectedBuddysType, StatusOfTime } from '@/types/map';
import { delay } from '@/utils/utils';

import { useKakaoMapControls } from './useKakaoMapControls';
import { useKakaoMapDrawing } from './useKakaoMapDrawing';
import { useKakaoMapInit } from './useKakaoMapInit';
import { useKakaoMapTracking } from './useKakaoMapTracking';

export interface UseKakaoMapProps {
  threshold: number | undefined;
  buddyList: BuddysType[];
  selectedBuddys: SelectedBuddysType;
  isTargetClicked: boolean;
  setIsTargetClicked: React.Dispatch<React.SetStateAction<boolean>>;
  isStarted: IsStartedType;
  setIsStarted: React.Dispatch<React.SetStateAction<IsStartedType>>;
  walkStatus: StatusOfTime;
  canvasRef: React.MutableRefObject<HTMLCanvasElement | null>;
}

export interface SetOverlayProps {
  isStarted: IsStartedType;
  selectedBuddys: SelectedBuddysType;
  markerRef: React.MutableRefObject<kakao.maps.Marker | null>;
  overlayRef: React.MutableRefObject<kakao.maps.CustomOverlay | null>;
  map: kakao.maps.Map | null;
  customContents: HTMLDivElement;
  closeButton: HTMLImageElement;
}

// ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî, ÏúÑÏπò Ï∂îÏ†Å, Í≤ΩÎ°ú Í∑∏Î¶¨Í∏∞
export const useKakaoMap = ({
  threshold,
  buddyList,
  selectedBuddys,
  isTargetClicked,
  setIsTargetClicked,
  isStarted,
  setIsStarted,
  walkStatus,
  canvasRef,
}: UseKakaoMapProps) => {
  const [positions, setPositions] = useState<PositionPair>({
    previous: null, // Ï¥àÍ∏∞ÏóêÎäî Ïù¥Ï†Ñ ÏúÑÏπòÍ∞Ä ÏóÜÏúºÎØÄÎ°ú null
    current: DEFAULT_MAP_POSITION, // Í∏∞Î≥∏ ÏúÑÏπòÎ•º ÌòÑÏû¨ ÏúÑÏπòÎ°ú ÏÑ§Ï†ï
  });

  // Ï¥àÍ∏∞Ìôî Í¥ÄÎ†® Î°úÏßÅ
  const { map, mapRef, markerRef, changedPosition, setChangedPosition } = useKakaoMapInit({ positions, setPositions });

  // ÏÇ¨Ïö©Ïûê ÏúÑÏπò Ï∂îÏ†Å Î°úÏßÅ
  const { watchID, startWatchingPosition, stopWatchingPosition, linePathRef, overlayRef } = useKakaoMapTracking({
    threshold,
    positions,
    setPositions,
    markerRef,
  });

  // Í≤ΩÎ°ú Í∑∏Î¶¨Í∏∞ Î°úÏßÅ
  const { handleDrawPolyline } = useKakaoMapDrawing({ map, linePathRef, positions });

  // ÏßÄÎèÑÏùò Ï°∞Ïûë Î∞è Ï†úÏñ¥ Í¥ÄÎ†®
  const { handleMapMoveAndStateUpdate, adjustMapBoundsToPath, handleTargetButtonClick } = useKakaoMapControls({
    map,
    positions,
    linePathRef,
    isTargetClicked,
    setIsTargetClicked,
    changedPosition,
    setChangedPosition,
    walkStatus,
  });

  // Ïò§Î≤ÑÎ†àÏù¥ ÏÑ§Ï†ï
  useEffect(() => {
    if (!(isStarted === 'start' && map && selectedBuddys.length && markerRef.current)) return;
    const { customContents, closeButton } = createOverLayElement(selectedBuddys, buddyList);
    setOverlay({ isStarted, selectedBuddys, overlayRef, markerRef, map, customContents, closeButton });
  }, [isStarted, map, selectedBuddys, buddyList]);

  // ÏÇ∞Ï±Ö Ï¢ÖÎ£å ÌõÑ Í≤ΩÎ°ú Í∑∏Î¶¨Í≥† Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
  useEffect(() => {
    const donelogic = async () => {
      const linePath = linePathRef.current;
      console.log('linePath: ', linePath);
      if (!(canvasRef?.current instanceof HTMLCanvasElement)) return;

      const snapShot = new RouteSnapshot({
        canvasRef: { current: canvasRef.current },
        routes: fromKakaoLatLng(linePathRef.current),
      });

      const imageURL = snapShot.generate();

      if (!imageURL) return;

      await delay(1500);
      setIsStarted('done');
    };

    // ÏÇ∞Ï±Ö Ï¢ÖÎ£å ÌõÑ Í≤ΩÎ°ú Í∑∏Î¶¨Í≥† Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
    if (walkStatus === 'stop' && mapRef.current && canvasRef.current && changedPosition) {
      donelogic();
    }
  }, [canvasRef, changedPosition, linePathRef, mapRef, walkStatus]);

  // Ï¢ÖÎ£å Î≤ÑÌäº
  useEffect(() => {
    if (!(walkStatus === 'stop' && map && linePathRef.current && overlayRef.current)) return;
    // console.log('üëΩ 1. Ï¢ÖÎ£å Î≤ÑÌäº ÎàÑÎ¶Ñ');

    // Ïò§Î≤ÑÎ†àÏù¥ Ï†úÍ±∞
    if (overlayRef.current) {
      // console.log('üëΩ Ïò§Î≤ÑÎ†àÏù¥ Ï†úÍ±∞');
      overlayRef.current.setMap(null);
    }
    // ÏúÑÏπò Ï∂îÏ†Å Ï§ëÏßÄ
    if (watchID.current !== null) {
      // console.log('üëΩ ÏúÑÏπòÏ∂îÏ†Å Ï§ëÏßÄ');
      stopWatchingPosition();
    }

    // bounds_changed Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    const handleBoundsChanged = () => {
      // ÏßÄÎèÑÍ∞Ä Ïã§Ï†úÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Îêú ÌõÑÏóê Ïã§ÌñâÎê®
      const newCenter = map.getCenter();
      // console.log('üëΩ 3. ÏßÄÎèÑ Î≤îÏúÑÍ∞Ä ÏÑ§Ï†ïÎêú ÌõÑ Ï§ëÏã¨ Ï¢åÌëú Î∞è Î†àÎ≤® Ï†ÄÏû•:', newCenter);
      setChangedPosition([newCenter.getLat(), newCenter.getLng()]);

      // Ïã§Ìñâ ÌõÑ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ (Ìïú Î≤àÎßå Ïã§ÌñâÎêòÎèÑÎ°ù)
      kakao.maps.event.removeListener(map, 'bounds_changed', handleBoundsChanged);
    };

    // Î¶¨Ïä§ÎÑà Îì±Î°ù
    // console.log('üëΩ 2. bounds_changed Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä');
    kakao.maps.event.addListener(map, 'bounds_changed', handleBoundsChanged);

    adjustMapBounds(map, linePathRef.current);

    map.relayout();
  }, [map, walkStatus, stopWatchingPosition]);

  // ÏãúÏûë, ÏùºÏãúÏ§ëÏßÄ, Ïû¨ÏãúÏûë
  useEffect(() => {
    // ÏãúÏûë Ïãú ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïû¨Í∞ú + ÎßàÏª§Ïùò ÏÉàÎ°úÏö¥ ÏúÑÏπòÎ°ú Ïò§Î≤ÑÎ†àÏù¥ Ïù¥Îèô
    if (isStarted === 'start' && walkStatus === 'start' && map && selectedBuddys.length) {
      replaceCustomOverLay({ overlayRef, markerRef });

      // Ïù¥ÎØ∏ watchPositionÏù¥ Ïã§Ìñâ Ï§ëÏù∏ Í≤ΩÏö∞ Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
      if (watchID.current === null) {
        handleMapMoveAndStateUpdate();
        startWatchingPosition(); // ÏúÑÏπò Ï∂îÏ†Å Ïû¨Í∞ú
      }
    }

    // ÏùºÏãú Ï§ëÏßÄ Ïãú ÏúÑÏπò Ï∂îÏ†Å Ï§ëÎã®
    if (walkStatus === 'pause' && watchID.current !== null) {
      stopWatchingPosition();
    }
  }, [
    isStarted,
    walkStatus,
    map,
    selectedBuddys,
    handleMapMoveAndStateUpdate,
    startWatchingPosition,
    stopWatchingPosition,
  ]);

  // ÏúÑÏπòÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏùÑ Îïå ÏßÄÎèÑ Ï§ëÏã¨ Ïù¥Îèô (ÏßÄÎèÑ Îã§Ïãú Ï¥àÍ∏∞ÌôîÌïòÏßÄ ÏïäÏùå)
  useEffect(() => {
    if (map && positions.previous) {
      const moveLatLon = getMapPosition(positions);
      setChangedPosition(() => [positions.current[0], positions.current[1]]);
      moveMapTo(map, moveLatLon, DEFAULT_MAP_LEVEL);
    }
  }, [positions, map]);

  // Ï≤´ ÏßÄÎèÑ ÏÖãÌåÖ
  // useEffect(() => {
  //   return () => {
  //     // ÌïÑÏàòÏ†ÅÏù∏ cleanupÎßå ÎÇ®Í∏∞Í∏∞
  //     if (map) {
  //       // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
  //       kakao.maps.event.removeListener(map, 'center_changed', () =>
  //         centerChangedEventListener(map, setChangedPosition)
  //       );

  //       // ÎßàÏª§ Ï†úÍ±∞
  //       if (markerRef.current) {
  //         markerRef.current.setMap(null);
  //         markerRef.current = null;
  //       }

  //       // Ïò§Î≤ÑÎ†àÏù¥ Ï†úÍ±∞
  //       if (overlayRef.current) {
  //         overlayRef.current.setMap(null);
  //         overlayRef.current = null;
  //       }

  //       // ÏßÄÎèÑ Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
  //       if (mapRef.current) {
  //         mapRef.current.innerHTML = '';
  //       }
  //       // ÏúÑÏπò Ï∂îÏ†Å Ï§ëÏßÄ
  //       if (watchID.current !== null) {
  //         navigator.geolocation.clearWatch(watchID.current);
  //         watchID.current = null;
  //       }

  //       // polyline Ï†úÍ±∞
  //       if (linePathRef.current.length > 0) {
  //         linePathRef.current = [];
  //       }
  //       // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
  //       setPositions({ previous: null, current: DEFAULT_MAP_POSITION });
  //       setChangedPosition(null);

  //       // ÏßÄÎèÑ Ïù∏Ïä§ÌÑ¥Ïä§ Ï†úÍ±∞
  //       map.relayout();
  //       setMap(null);
  //     }
  //   };
  // }, [mapRef, map]);

  return { map, mapRef, linePathRef, changedPosition };
};
