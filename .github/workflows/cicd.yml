# GitHub repository actions 페이지에 나타날 이름
name: buddyGuard CI/CD using github actions & docker-compose

# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches:
      - dev-be  # dev-be 브랜치에서 푸시 이벤트 발생 시 실행
  workflow_dispatch:  # 수동으로 트리거 가능하게 설정

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2

      # 현재 작업 디렉토리 출력 (디버깅용)
      - name: Print working directory for debugging
        run: pwd

      # 전체 디렉토리 구조 출력 (디버깅용)
      - name: List directory contents
        run: ls -R

      # JDK setting - GitHub Actions에서 사용할 JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: Make application.yml
        if: contains(github.ref, 'dev-be')
        working-directory: ./be 
        run: |
          sudo mkdir -p ./src/main/resources
          sudo touch ./src/main/resources/application.yml
          echo "${{ secrets.YML }}" | sudo tee ./src/main/resources/application.yml > /dev/null
        shell: bash

      # application.yml 파일 내용 확인 (디버깅용)
      - name: Check application.yml content
        if: contains(github.ref, 'dev-be')
        working-directory: ./be
        run: cat ./src/main/resources/application.yml  

      # Gradle build
      - name: Build with Gradle
        working-directory: ./be
        run: ./gradlew build -x test

      # Docker Build & Push
      - name: Docker build & push to dev-be
        if: contains(github.ref, 'dev-be')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./be/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev ./be
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      # Deploy to EC2 with Docker Compose
      - name: Deploy to dev-be with Docker Compose
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'dev-be')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # Docker Compose 파일 생성
            cat <<EOF | sudo tee /home/ubuntu/docker-compose.yml > /dev/null
            version: '3.8'
            services:
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
                container_name: mybuddyguard-container
                ports:
                  - "8081:8080"
                environment:
                  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
                  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
                  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
                  SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
                  SPRING_DATA_REDIS_PORT: ${SPRING_DATA_REDIS_PORT}
                  SPRING_DATA_REDIS_TIMEOUT: ${SPRING_DATA_REDIS_TIMEOUT}
                networks:
                  - buddyguard-network

              redis:
                image: redis
                container_name: redis-container
                ports:
                  - "6379:6379"
                networks:
                  - buddyguard-network

            networks:
              buddyguard-network:
                driver: bridge
            EOF

            # Docker Compose를 사용하여 배포
            cd /home/ubuntu
            sudo docker-compose down
            sudo docker-compose up -d
            
            # 불필요한 도커 이미지 정리
            sudo docker image prune -f
