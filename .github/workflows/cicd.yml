# github repository actions 페이지에 나타날 이름
name: buddyGuard CI/CD using github actions & docker

# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches:
      - dev-be  # dev-be 브랜치에서 푸시 이벤트 발생 시 실행
  workflow_dispatch:  # 수동으로 트리거 가능하게 설정

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2

       # 현재 작업 디렉토리 출력 (디버깅용)
      - name: Print working directory for debugging
        run: pwd  # 현재 작업 디렉토리 확인

      # 전체 디렉토리 구조 출력 (디버깅용)
      - name: List directory contents
        run: ls -R  # 전체 디렉토리 구조 출력

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make application.yml
        if: contains(github.ref, 'dev-be')
        working-directory: ./be 
        run: |
          sudo mkdir -p ./src/main/resources  # 필요한 경우 sudo 사용
          sudo touch ./src/main/resources/application.yml
          echo "${{ secrets.YML }}" | sudo tee ./src/main/resources/application.yml > /dev/null  # tee 명령어로 권한 문제 해결
        shell: bash

      # gradle build
      - name: Build with Gradle
        working-directory: ./be
        run: ./gradlew build -x test

      # 전체 디렉토리 구조 확인 (디버깅용)
      - name: List directory contents after build
        run: ls -R ./be/build/libs  # 빌드된 JAR 파일이 있는지 확인

      # 디렉토리 구조 확인 (디버깅용)
      - name: List directory contents
        run: ls -R  # 전체 디렉토리 구조 출력

      # docker build & push to production
      - name: Docker build & push to dev-be
        if: contains(github.ref, 'dev-be')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./be/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      ## deploy to production
      - name: Deploy to dev-be
        uses: appleboy/ssh-action@master
        id: deploy-dev-be
        if: contains(github.ref, 'dev-be')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker image prune -f

